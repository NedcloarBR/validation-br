{"version":3,"sources":["../../src/documents/cpf.js"],"names":["require","invalidListGenerator","sumElementsByMultipliers","sumToDV","isCPF","value","cpf","replace","blackList","length","includes","sum1","substr","sum2","dv1","dv2","Number","charAt","module","exports"],"mappings":";;AAAA,eAAoEA,OAAO,CAAC,cAAD,CAA3E;AAAA,IAAQC,oBAAR,YAAQA,oBAAR;AAAA,IAA8BC,wBAA9B,YAA8BA,wBAA9B;AAAA,IAAwDC,OAAxD,YAAwDA,OAAxD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAgB;AAAA,MAAfC,KAAe,uEAAP,EAAO;AAC5B,MAAMC,GAAG,GAAGD,KAAK,CAACE,OAAN,CAAc,SAAd,EAAyB,EAAzB,CAAZ;AAEA,MAAMC,SAAS,GAAGP,oBAAoB,CAAC,EAAD,CAAtC;AACA,MAAI,CAACK,GAAD,IAAQA,GAAG,CAACG,MAAJ,KAAe,EAAvB,IAA6BD,SAAS,CAACE,QAAV,CAAmBJ,GAAnB,CAAjC,EAA0D,OAAO,KAAP;AAE1D,MAAMK,IAAI,GAAGT,wBAAwB,CAACI,GAAG,CAACM,MAAJ,CAAW,CAAX,EAAc,CAAd,CAAD,EAAmB,CAAC,EAAD,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,CAAnB,CAArC;AACA,MAAMC,IAAI,GAAGX,wBAAwB,CAACI,GAAG,CAACM,MAAJ,CAAW,CAAX,EAAc,EAAd,CAAD,EAAoB,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,CAApB,CAArC;AAEA,MAAME,GAAG,GAAGX,OAAO,CAACQ,IAAD,CAAnB;AACA,MAAMI,GAAG,GAAGZ,OAAO,CAACU,IAAD,CAAnB;AAEA,MAAIC,GAAG,KAAKE,MAAM,CAACV,GAAG,CAACW,MAAJ,CAAW,CAAX,CAAD,CAAlB,EAAmC,OAAO,KAAP;AACnC,MAAIF,GAAG,KAAKC,MAAM,CAACV,GAAG,CAACW,MAAJ,CAAW,EAAX,CAAD,CAAlB,EAAoC,OAAO,KAAP;AAEpC,SAAO,IAAP;AACD,CAhBD;;AAkBAC,MAAM,CAACC,OAAP,GAAiBf,KAAjB","sourcesContent":["const { invalidListGenerator, sumElementsByMultipliers, sumToDV } = require('../lib/utils');\n\n/**\n * isCPF()\n * Calcula se um CPF é válido\n *\n * @doc\n * CPF deve possuir 11 dígitos.\n *\n * - Os caracteres 1 a 8 são números sequenciais definidos pela Receita Federal\n *\n * - O caractere 9 refere-se à região fiscal emissora do documento\n *    1 – DF, GO, MS, MT e TO\n *    2 – AC, AM, AP, PA, RO e RR\n *    3 – CE, MA e PI\n *    4 – AL, PB, PE, RN\n *    5 – BA e SE\n *    6 – MG\n *    7 – ES e RJ\n *    8 – SP\n *    9 – PR e SC\n *    0 – RS\n *\n * - Os caracteres 10 e 11 são dígitos verificadores.\n *\n * 1) Partes do número\n * ------------------------------------------------\n * | Número                       | R |  DV  |\n *  2   8   0 . 0   1   2 . 3   8   9 - 3   8\n *\n * 2) Cálculo do primeiro DV.\n *\n *  - Soma-se o produto das algarismos 1 a 9 pelos números 10, 9, 8, 7, 6, 5, 4, 3, 2\n *\n *    2   8   0   0   1   2   3   8   9\n *    x   x   x   x   x   x   x   x   x\n *   10   9   8   7   6   5   4   3   2\n * = 20 +72  +0  +0  +6 +10 +12 +24 +18 = 162\n *\n *  - O somatório encontrado é dividido por 11 e o resultado é subtraído de 11\n *    162 / 11 tem resto 8. 11 - 8 = 3. DV1 é 3.\n *    Obs.: Caso o cálculo de DV1 retorne 10, o resultado será 0.\n *\n * 3) Cálculo do segundo DV.\n *\n *  - Soma-se o produto das algarismos 1 a 10 pelos números 11, 10, 9, 8, 7, 6, 5, 4, 3, 2\n *\n *    2   8   0   0   1   2   3   8   9   3\n *    x   x   x   x   x   x   x   x   x   x\n *   11  10   9   8   7   6   5   4   3   2\n * = 22 +80  +0  +0  +7 +12 +15 +32 +27 = 201\n *\n *  - O somatório encontrado é dividido por 11 e o resultado é subtraído de 11\n *    201 / 11 tem resto 3. 11 - 3 = 8. DV2 é 8.\n *    Obs.: Caso o cálculo de DV2 retorne 10, o resultado será 0.\n *\n * Fonte: http://clubes.obmep.org.br/blog/a-matematica-nos-documentos-cpf/\n *\n * @param {String} value Título eleitoral\n * @returns {Boolean}\n */\nconst isCPF = (value = '') => {\n  const cpf = value.replace(/[^\\d]+/g, '');\n\n  const blackList = invalidListGenerator(11);\n  if (!cpf || cpf.length !== 11 || blackList.includes(cpf)) return false;\n\n  const sum1 = sumElementsByMultipliers(cpf.substr(0, 9), [10, 9, 8, 7, 6, 5, 4, 3, 2]);\n  const sum2 = sumElementsByMultipliers(cpf.substr(0, 10), [11, 10, 9, 8, 7, 6, 5, 4, 3, 2]);\n\n  const dv1 = sumToDV(sum1);\n  const dv2 = sumToDV(sum2);\n\n  if (dv1 !== Number(cpf.charAt(9))) return false;\n  if (dv2 !== Number(cpf.charAt(10))) return false;\n\n  return true;\n};\n\nmodule.exports = isCPF;\n"],"file":"cpf.js"}