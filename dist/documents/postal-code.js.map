{"version":3,"sources":["../../src/documents/postal-code.js"],"names":["require","sumElementsByMultipliers","isPostalCode","value","match","postalCode","replace","sum","substr","rest","specificities","dv","Number","charAt","module","exports"],"mappings":";;AAAA;AACA,eAAqCA,OAAO,CAAC,cAAD,CAA5C;AAAA,IAAQC,wBAAR,YAAQA,wBAAR;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAgB;AAAA,MAAfC,KAAe,uEAAP,EAAO;AACnC,MAAMC,KAAK,GAAGD,KAAK,CAACC,KAAN,CAAY,+BAAZ,EAA6C,EAA7C,CAAd;AACA,MAAI,CAACA,KAAL,EAAY,OAAO,KAAP;AAEZ,MAAMC,UAAU,GAAGD,KAAK,CAAC,CAAD,CAAL,CAASE,OAAT,CAAiB,SAAjB,EAA4B,EAA5B,CAAnB;AAEA,MAAMC,GAAG,GAAGN,wBAAwB,CAACI,UAAU,CAACG,MAAX,CAAkB,CAAlB,EAAqB,CAArB,CAAD,EAA0B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAA1B,CAApC;AAEA,MAAMC,IAAI,GAAGF,GAAG,GAAG,EAAnB;AACA,MAAMG,aAAa,GAAG;AAAE,OAAG;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAL;AAAgB,OAAG;AAAEA,MAAAA,EAAE,EAAE;AAAN;AAAnB,GAAtB;AACA,MAAMA,EAAE,GAAGD,aAAa,CAACD,IAAD,CAAb,GAAsBC,aAAa,CAACD,IAAD,CAAb,CAAoBE,EAA1C,GAA+C,KAAKF,IAA/D;AAEA,MAAIE,EAAE,KAAKC,MAAM,CAACP,UAAU,CAACQ,MAAX,CAAkB,CAAlB,CAAD,CAAjB,EAAyC,OAAO,KAAP;AAEzC,SAAO,IAAP;AACD,CAfD;;AAiBAC,MAAM,CAACC,OAAP,GAAiBb,YAAjB","sourcesContent":["// const { sumElementsByMultipliers } = require('../../dist/lib/utils');\nconst { sumElementsByMultipliers } = require('../lib/utils');\n\n/**\n * isPostalCode()\n * Calcula se um código de rastreamento postal no formato JT194690698BR é válido.\n *\n * @doc\n * - O número de registro postal deve possuir 13 caracters no formato JT194690698BR.\n *\n * - Os caracteres 1 e 2 informam o tipo do objeto. Ex.: SX é Sedex, RC é carta registrada etc.\n *\n * - Os caracteres de 3 a 10 são a numeração sequencial do tipo do objeto.\n *\n * - O caractere 11 é o dígito verificador.\n *\n * - Os caracteres 12 e 13 representa o código do País de onde a postagem partiu.\n *\n * 1) Partes do número\n *  ______ ___________________________ ______ _______\n * | Tipo | Número                    |  DV  |  País |\n * | J T    1  9  4  6  9  0  6  9       8      B R  |\n * |______|___________________________|______|_______|\n *\n * 2) Cálculo do DV.\n *\n *  - Soma-se o produto das algarismos 3 a 10 pelos números 8, 6, 4, 2, 3, 5, 9, 7\n *\n *    1   9   4   6   9   0   6   9\n *    x   x   x   x   x   x   x   x\n *    8   6   4   2   3   5   9   7\n * =  8 +54 +16 +12 +18  +0 +54 +63 = 234\n *\n *  - O somatório encontrado é dividido por 11 e o resultado é subtraído de 11\n *    234 / 11 tem resto 3. 11 - 3 = 8. DV1 é 8.\n *    Obs.: Caso o cálculo de DV1 retorne 0, o resultado será 5.\n *          Caso retorne 1, o resto será 0\n *\n *\n *\n *\n * Fonte:\n *\n * @param {String} value Objeto postal no formato JT194690698BR\n * @returns {Boolean}\n */\nconst isPostalCode = (value = '') => {\n  const match = value.match(/^[a-z]{2}([\\d]{9})[a-z]{2}$/ig, '');\n  if (!match) return false;\n\n  const postalCode = match[0].replace(/[^\\d]+/g, '');\n\n  const sum = sumElementsByMultipliers(postalCode.substr(0, 8), [8, 6, 4, 2, 3, 5, 9, 7]);\n\n  const rest = sum % 11;\n  const specificities = { 0: { dv: 5 }, 1: { dv: 0 } };\n  const dv = specificities[rest] ? specificities[rest].dv : 11 - rest;\n\n  if (dv !== Number(postalCode.charAt(8))) return false;\n\n  return true;\n};\n\nmodule.exports = isPostalCode;\n"],"file":"postal-code.js"}