{"version":3,"sources":["../../src/lib/utils.js"],"names":["sumToDV","sum","invalidListGenerator","size","Array","keys","map","f","String","repeat","sumElementsByMultipliers","value","multiplier","isArray","split","reduce","accu","curr","i","Number","charAt"],"mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAC3B,SAAOA,GAAG,GAAG,EAAN,GAAW,CAAX,GAAe,CAAf,GAAmB,KAAMA,GAAG,GAAG,EAAtC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,oBAAT,CAA8BC,IAA9B,EAAoC;AACzC,SAAO,iCAAIC,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,EAAJ,EAAsBC,GAAtB,CAA0B,UAACC,CAAD;AAAA,WAAOC,MAAM,CAACD,CAAD,CAAN,CAAUE,MAAV,CAAiBN,IAAjB,CAAP;AAAA,GAA1B,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASO,wBAAT,CAAkCC,KAAlC,EAAyCC,UAAzC,EAAqD;AAC1D,SAAO,CAACR,KAAK,CAACS,OAAN,CAAcD,UAAd,IAA4BA,UAA5B,GAAyCA,UAAU,CAACE,KAAX,CAAiB,EAAjB,CAA1C,EACJC,MADI,CACG,UAACC,IAAD,EAAOC,IAAP,EAAaC,CAAb;AAAA,WAAmBF,IAAI,GAAIC,IAAI,GAAGE,MAAM,CAACR,KAAK,CAACS,MAAN,CAAaF,CAAb,CAAD,CAAxC;AAAA,GADH,EAC+D,CAD/D,CAAP;AAED","sourcesContent":["/**\n * Calcula o DV verificador a partir das regras do MOD11:\n * O valor da soma é dividido por 11. O resultado é o resto da divisão. Caso o resto seja\n * menor que 2, ou seja, o valor da divisão seja 10 ou 11, o resultado é 0.\n *\n * @param {Integer} sum Soma\n */\nexport function sumToDV(sum) {\n  return sum % 11 < 2 ? 0 : 11 - (sum % 11);\n}\n\n/**\n * Cria uma lista de valores repetidos no tamanho do documento para eliminar\n * valores que já conhecemos como inválidos\n *\n * @example\n * invalidListGenerator(10, 11)\n * //-> [00000000000, 11111111111, ....., 99999999999]\n *\n * @param {Integer} length Número de itens do array\n * @param {Integer} size Tamanho da string gerada\n * @returns {Array} Lista de valores\n */\nexport function invalidListGenerator(size) {\n  return [...Array(10).keys()].map((f) => String(f).repeat(size));\n}\n\n/**\n * Soma os elementos de uma string com os elementos de outra, ou de um array\n * @example\n *   sumElementsByMultipliers('123', '987')      //-> 46\n *   sumElementsByMultipliers('123', [9, 8, 7])  //-> 46\n *\n * @param {String} value\n * @param {String|Array} multiplier\n * @returns {Integer} Somatório\n */\nexport function sumElementsByMultipliers(value, multiplier) {\n  return (Array.isArray(multiplier) ? multiplier : multiplier.split(''))\n    .reduce((accu, curr, i) => accu + (curr * Number(value.charAt(i))), 0);\n}\n"],"file":"utils.js"}